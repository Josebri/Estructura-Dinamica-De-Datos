/*Concepto de arbol binario: Es un arbol de orden 2. Un árbol binario es una estructura recursiva,
se divide en tres sub conjuntos: Nodo Raíz, Subárbol izquierdo y subárbol derecho.*/
#include <iostream>
#include <conio.h>

struct Nodo
{
	int dato;
	Nodo *der;
	Nodo *izq;
};

//Prototipos
void menu();
Nodo *crearNodo(int);
void insertarNodo(Nodo *&,int);
void mostrarArbol(Nodo *,int);
bool busqueda (Nodo *,int);
void preOrden(Nodo *);
void inOrden(Nodo *);
void postOrden(Nodo *);

Nodo *arbol = NULL;

int main()
{
	menu();
	
	getch();
	return 0;
	
}

//Funcion de menu
void menu()
{
	int dato,opcion,contador=0;
	
	do
	{
		printf("\t.:MENU:.\n");
		printf("1. Insertar un nuevo nodo\n");
		printf("2. Mostrar el arbol completo\n");
		printf("3. Buscar un elemento en el arbol\n");
		printf("4. Recorrer el arbol en PreOrden\n");
		printf("5. Recorrer el arbol en InOrden\n");
		printf("6. Recorrer el arbol en PostOrden\n");
		printf("7. Salir\n");
		printf("Opcion: ");
		scanf("%d",&opcion);
		
		switch(opcion)
		{
			case 1:
				printf("\nDigite un numero:");
				scanf("%d",&dato);
				insertarNodo(arbol,dato);//insertar nuevo nodo
				printf("\n");
				system("pause");
				break;
			case 2:
				printf("\nMostrando el arbol completo:\n\n");
				mostrarArbol(arbol,contador);
				printf("\n");
				system("pause");
				break;	
			case 3:
			{
				printf("\nDigite el elemento a buscar: ");
				scanf("%d",&dato);
				if(busqueda(arbol,dato) == true)
				{
					printf("\nElemento %d a sido encontrado en el arbol\n",dato);
				}
				else
				{
						printf("\nElemento no encontrado\n");
				}
				printf("\n");
				system("pause");
				break;
			}
			case 4:
			{
				printf("\nRecorrido en PreOrden:");
				preOrden(arbol);
				printf("\n\n");
				system("pause");
				break;
			}
			case 5:
			{
				printf("\nRecorrido en InOrden:");
				inOrden(arbol);
				printf("\n\n");
				system("pause");
				break;
			}
				case 6:
			{
				printf("\nRecorrido en PostOrden:");
				postOrden(arbol);
				printf("\n\n");
				system("pause");
				break;
			}			
			
		}
		system("cls");
	}while(opcion != 7);
}

//Funcion para crear un nuevo nodo
Nodo *crearNodo(int n)
{
	Nodo *nuevo_nodo = new Nodo();
	
	nuevo_nodo->dato = n;
	nuevo_nodo->der = NULL;
	nuevo_nodo->izq = NULL;
	
	return nuevo_nodo;
}

//Funcion para insertar elementos en el arbol
void insertarNodo(Nodo *&arbol,int n)
{
	if(arbol==NULL)//si el arbol esta vacio
	{
		Nodo *nuevo_nodo = crearNodo(n);
		arbol = nuevo_nodo;
	}
	else//si el arbol tiene un nodo o mas
	{
		int valorRaiz = arbol->dato; //obtener el valor de la raiz
		if(n<valorRaiz)//si el elemento es menor a la raiz, insertamos en izq
		{
			insertarNodo(arbol->izq,n);
		}
		else//si el elemento es mayor a la raiz, insertamos en der
		{
			insertarNodo(arbol->der,n);
		}
	}
}

//Funcion para mostrar el arbol completo
void mostrarArbol(Nodo *arbol, int cont)
{
	if(arbol == NULL)//si el arbol esta vacio
	{
		return;
	}
	else
	{
		mostrarArbol(arbol->der,cont+1);
		for(int i=0;i<cont;i++)
		{
			printf("   ");
		}
		printf("%d\n",arbol->dato);
		mostrarArbol(arbol->izq,cont+1);
	}
}

//Funcion para buscar un elemento en el arbol
bool busqueda(Nodo *arbol,int n)
{
	if(arbol == NULL)//si el arbol esta vacio
	{
		return false;
	}
	else if(arbol->dato == n)//si el nodo es igual al elemento
	{
		return true;
	}
	else if(n < arbol->dato)
	{
		 return busqueda(arbol->izq,n);
	}
	else
	{
		return busqueda(arbol ->der,n);
	}
}

//Funcion para recorrido en profundidad - PreOrden
void preOrden(Nodo *arbol)
{
	if(arbol == NULL)//si el arbol esta vacio
	{
		return;
	}
	else
	{
		printf("%d - ",arbol->dato);
		preOrden(arbol->izq);
		preOrden(arbol->der);
	}
}

//Funcion para recorrido en profundidad - InOrden
void inOrden(Nodo *arbol)
{
	if(arbol == NULL)//si el arbol esta vacio
	{
		return;
	}
	else
	{
		inOrden(arbol->izq);
		inOrden(arbol->der);
		printf("%d - ",arbol->dato);
	}
}

//Funcion para recorrido en profundidad - InOrden
void postOrden(Nodo *arbol)
{
		if(arbol == NULL)//si el arbol esta vacio
	{
		return;
	}
	else
	{
		postOrden(arbol->izq);
		postOrden(arbol->der);
		printf("%d - ",arbol->dato);
	}
}
